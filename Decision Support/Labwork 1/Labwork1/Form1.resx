<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label27.Text" xml:space="preserve">
    <value>Представьте, что вам прислали на диагностику программу, 
которая выдает неверные результаты и нужно в скором времени её исправить. 
Расставьте вероятности наступления (от 0 до 1, с точностью до 2х знаков после точки) для дальнейших сценариев:
1. Предположить, что ошибка была совершена в математических расчетах, найти и исправить
2. Предположить, что ошибка допущена при написании условий, найти и исправить
3. Предположить, что ошибка допущена при написании цикла, найти и исправить
4. предположить, что программа написано неверно вся, вернуть разработчику</value>
  </data>
  <data name="textBox5.Text" xml:space="preserve">
    <value>Вопрос 1: Что такое сигналв Godot
1) Встроенная функция, вызывапющаяся при определенных условий
2) Обращение к переменной
3) Элемент блока try catch
4) Набор данных в переменной

Вопрос 2: Что такое группы в Godot
1) Объединение функций
2) Аналог package
3) Иными словами теги
4) Аналог функций
 
Вопрос 3: Что такое наследование сцены в Godot
1) Создание базового поведения объекта
2) Визуальное конструирование
3) Базовый образ
4) Передача свойств

Вопрос 4: Что такое расширение скрипта в Godot
1) Создание подскрипта
2) Наследование базового класса
3) Создание надскрипта
4) Наследование дочернего класса

Вопрос 5: Какая структура у сцены в Godot
1) Иерархическая
2) Кольцевидная
3) Линейная
4) Древовидная

Вопрос 6: Как обращаться к нодам в скриптах в Godot (на GdSctipt)
1) с помощью "@"
2) с помощью "#"
3) с помощью "$"
4) с помощью "^"

Впорос 7: Сколько существует методов для загрузки файлов
1) 3
2) 2
3) 1
4) 4

Вопрос 8: Как называются методы предварительной загрузки
1) load, overload
2) load, preload
3) preload, overload
4) instaload oversize

Вопрос 9: Метод класса это
1) способ работы с классом
2) переменная
3) функция
4) константа

Вопрос 10: Software-это:
1) только программы для подключения к компьютеру новых устройств
2) программное обеспечение компьютера
3) система "включил и работай"
4) программа вспомогательного назначения</value>
  </data>
  <data name="label54.Text" xml:space="preserve">
    <value>Сборка программы, включающая трансляцию всех модулей программы, 
написанных на одном или нескольких исходных языках программирования 
высокого уровня и/или языке ассемблера, в эквивалентные программные модули 
на низкоуровневом языке, близком машинному коду (абсолютный код, объектный модуль,
 иногда на язык ассемблера) или непосредственно на машинном языке или ином 
двоичнокодовом низкоуровневом командном языке это</value>
  </data>
  <data name="label56.Text" xml:space="preserve">
    <value>Есть три бога: A, B и C, которые являются богами истины, лжи и случая в произвольном порядке. 
Бог истины всегда говорит правду, бог лжи — всегда обманывает, бог случая либо говорит правду, либо лжёт, 
что определяется случайным образом. 
Требуется определить богов, на которые можно ответить «да» или «нет».
 Каждый вопрос задаётся только одному богу, но можно задавать одному богу более одного вопроса. 
Боги понимают язык, но отвечают на своём языке, в котором есть 2 слова «da» и «ja», причём неизвестно, 
какое слово обозначает «да», а какое «нет».
Какое минимальное количество вопросов нужно задать?

</value>
  </data>
</root>